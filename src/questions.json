[
      {
            "question": "Какой алгоритм сортировки имеет наихудшую временную сложность O(n²) в среднем?",
            "options": {
              "a": "Быстрая сортировка",
              "b": "Сортировка слиянием",
              "c": "Пузырьковая сортировка",
              "d": "Сортировка кучей"
            },
            "correct_answer": "c"
          },
          {
            "question": "Какая структура данных используется для реализации стека?",
            "options": {
              "a": "Хэш-таблица",
              "b": "Двоичное дерево поиска",
              "c": "Массив или связный список",
              "d": "Очередь с приоритетом"
            },
            "correct_answer": "c"
          },
          {
            "question": "Какой метод обхода графа гарантирует нахождение кратчайшего пути в невзвешенном графе?",
            "options": {
              "a": "Обход в глубину (DFS)",
              "b": "Обход в ширину (BFS)",
              "c": "Алгоритм Прима",
              "d": "Алгоритм Крускала"
            },
            "correct_answer": "b"
          },
          {
            "question": "Как называется структура данных, в которой каждый узел имеет не более двух потомков?",
            "options": {
              "a": "Граф",
              "b": "Двоичное дерево",
              "c": "Список",
              "d": "Куча"
            },
            "correct_answer": "b"
          },
          {
            "question": "Какова временная сложность бинарного поиска в отсортированном массиве?",
            "options": {
              "a": "O(n)",
              "b": "O(log n)",
              "c": "O(n log n)",
              "d": "O(n²)"
            },
            "correct_answer": "b"
          },
          {
            "question": "Какой алгоритм используется для нахождения минимального остовного дерева в графе?",
            "options": {
              "a": "Алгоритм Дейкстры",
              "b": "Алгоритм Прима",
              "c": "Алгоритм Беллмана-Форда",
              "d": "Алгоритм Флойда-Уоршалла"
            },
            "correct_answer": "b"
          },
          {
            "question": "Какая структура данных лучше всего подходит для реализации словаря с быстрым поиском?",
            "options": {
              "a": "Массив",
              "b": "Связный список",
              "c": "Хэш-таблица",
              "d": "Двоичное дерево поиска"
            },
            "correct_answer": "c"
          },
          {
            "question": "Что возвращает алгоритм поиска в глубину при отсутствии пути между двумя вершинами графа?",
            "options": {
              "a": "Пустой путь",
              "b": "Кратчайший путь",
              "c": "Цикл",
              "d": "Ошибку"
            },
            "correct_answer": "a"
          },
          {
            "question": "Какой метод сортировки использует принцип «разделяй и властвуй»?",
            "options": {
              "a": "Пузырьковая сортировка",
              "b": "Быстрая сортировка",
              "c": "Сортировка выбором",
              "d": "Сортировка вставками"
            },
            "correct_answer": "b"
          },
          {
            "question": "Какова пространственная сложность рекурсивной реализации быстрой сортировки?",
            "options": {
              "a": "O(1)",
              "b": "O(log n)",
              "c": "O(n)",
              "d": "O(n²)"
            },
            "correct_answer": "b"
          },
          {
            "question": "Как называется структура данных, где элементы добавляются и удаляются с одного конца?",
            "options": {
              "a": "Очередь",
              "b": "Стек",
              "c": "Дек",
              "d": "Хэш-таблица"
            },
            "correct_answer": "b"
          },
          {
            "question": "Какой алгоритм решает задачу о рюкзаке с дробными предметами?",
            "options": {
              "a": "Жадный алгоритм",
              "b": "Динамическое программирование",
              "c": "Бинарный поиск",
              "d": "Обход в ширину"
            },
            "correct_answer": "a"
          },
          {
            "question": "Какова временная сложность операции вставки в хэш-таблицу в среднем?",
            "options": {
              "a": "O(1)",
              "b": "O(log n)",
              "c": "O(n)",
              "d": "O(n log n)"
            },
            "correct_answer": "a"
          },
          {
            "question": "Как называется дерево, в котором для каждого узла левое поддерево содержит меньшие ключи, а правое — большие?",
            "options": {
              "a": "AVL-дерево",
              "b": "Двоичное дерево поиска",
              "c": "Красно-черное дерево",
              "d": "Куча"
            },
            "correct_answer": "b"
          },
          {
            "question": "Какой алгоритм используется для нахождения кратчайшего пути в графе с отрицательными весами ребер?",
            "options": {
              "a": "Алгоритм Дейкстры",
              "b": "Алгоритм Беллмана-Форда",
              "c": "Алгоритм Прима",
              "d": "Алгоритм Крускала"
            },
            "correct_answer": "b"
          },
          {
            "question": "Какая структура данных используется для реализации очереди с приоритетом?",
            "options": {
              "a": "Связный список",
              "b": "Куча",
              "c": "Массив",
              "d": "Хэш-таблица"
            },
            "correct_answer": "b"
          },
          {
            "question": "Какой алгоритм сортировки устойчив к большим входным данным и имеет сложность O(n log n)?",
            "options": {
              "a": "Пузырьковая сортировка",
              "b": "Сортировка слиянием",
              "c": "Сортировка вставками",
              "d": "Сортировка выбором"
            },
            "correct_answer": "b"
          },
          {
            "question": "Что такое хэш-функция?",
            "options": {
              "a": "Функция для сортировки массива",
              "b": "Функция для преобразования ключа в индекс",
              "c": "Функция для поиска минимального элемента",
              "d": "Функция для обхода графа"
            },
            "correct_answer": "b"
          },
          {
            "question": "Какова временная сложность удаления элемента из бинарной кучи?",
            "options": {
              "a": "O(1)",
              "b": "O(log n)",
              "c": "O(n)",
              "d": "O(n log n)"
            },
            "correct_answer": "b"
          },
          {
            "question": "Как называется алгоритм, который находит все пары кратчайших путей в графе?",
            "options": {
              "a": "Алгоритм Дейкстры",
              "b": "Алгоритм Флойда-Уоршалла",
              "c": "Алгоритм Прима",
              "d": "Алгоритм Крускала"
            },
            "correct_answer": "b"
          },
          {
            "question": "Какая структура данных позволяет эффективно выполнять операции вставки и удаления с обоих концов?",
            "options": {
              "a": "Стек",
              "b": "Очередь",
              "c": "Дек",
              "d": "Хэш-таблица"
            },
            "correct_answer": "c"
          },
          {
            "question": "Какой метод используется для балансировки AVL-дерева?",
            "options": {
              "a": "Ротации",
              "b": "Хэширование",
              "c": "Слияние",
              "d": "Разделение"
            },
            "correct_answer": "a"
          },
          {
            "question": "Какова временная сложность поиска в несбалансированном двоичном дереве поиска в худшем случае?",
            "options": {
              "a": "O(1)",
              "b": "O(log n)",
              "c": "O(n)",
              "d": "O(n log n)"
            },
            "correct_answer": "c"
          },
          {
            "question": "Как называется алгоритм, который разбивает задачу на подзадачи и сохраняет их решения?",
            "options": {
              "a": "Жадный алгоритм",
              "b": "Динамическое программирование",
              "c": "Разделяй и властвуй",
              "d": "Бинарный поиск"
            },
            "correct_answer": "b"
          },
          {
            "question": "Какая структура данных используется для представления графа с помощью списков смежности?",
            "options": {
              "a": "Массив",
              "b": "Связный список",
              "c": "Матрица",
              "d": "Куча"
            },
            "correct_answer": "b"
          },
          {
            "question": "Какой алгоритм находит топологическую сортировку графа?",
            "options": {
              "a": "Алгоритм Дейкстры",
              "b": "Обход в глубину",
              "c": "Алгоритм Прима",
              "d": "Алгоритм Беллмана-Форда"
            },
            "correct_answer": "b"
          },
          {
            "question": "Какова временная сложность сортировки кучей (Heap Sort)?",
            "options": {
              "a": "O(n)",
              "b": "O(n log n)",
              "c": "O(n²)",
              "d": "O(log n)"
            },
            "correct_answer": "b"
          },
          {
            "question": "Как называется структура данных, в которой каждый узел хранит указатель на следующий и предыдущий узел?",
            "options": {
              "a": "Односвязный список",
              "b": "Двусвязный список",
              "c": "Циклический список",
              "d": "Массив"
            },
            "correct_answer": "b"
          },
          {
            "question": "Какой алгоритм используется для сжатия данных без потерь?",
            "options": {
              "a": "Алгоритм Хаффмана",
              "b": "Алгоритм Крускала",
              "c": "Алгоритм Прима",
              "d": "Алгоритм Дейкстры"
            },
            "correct_answer": "a"
          },
          {
            "question": "Какова временная сложность операции вставки в красно-черное дерево?",
            "options": {
              "a": "O(1)",
              "b": "O(log n)",
              "c": "O(n)",
              "d": "O(n log n)"
            },
            "correct_answer": "b"
          },
          {
            "question": "Как называется метод, который решает задачу, выбирая локально оптимальное решение на каждом шаге?",
            "options": {
              "a": "Динамическое программирование",
              "b": "Жадный алгоритм",
              "c": "Бинарный поиск",
              "d": "Разделяй и властвуй"
            },
            "correct_answer": "b"
          },
          {
            "question": "Какая структура данных используется для реализации алгоритма LIFO?",
            "options": {
              "a": "Очередь",
              "b": "Стек",
              "c": "Дек",
              "d": "Хэш-таблица"
            },
            "correct_answer": "b"
          },
          {
            "question": "Какой алгоритм находит кратчайший путь от одной вершины до всех остальных в графе с неотрицательными весами?",
            "options": {
              "a": "Алгоритм Беллмана-Форда",
              "b": "Алгоритм Дейкстры",
              "c": "Алгоритм Флойда-Уоршалла",
              "d": "Алгоритм Прима"
            },
            "correct_answer": "b"
          },
          {
            "question": "Как называется дерево, в котором высота левого и правого поддерева отличается не более чем на 1?",
            "options": {
              "a": "Двоичное дерево поиска",
              "b": "AVL-дерево",
              "c": "Куча",
              "d": "Граф"
            },
            "correct_answer": "b"
          },
          {
            "question": "Какова временная сложность алгоритма Крускала для нахождения минимального остовного дерева?",
            "options": {
              "a": "O(V²)",
              "b": "O(E log E)",
              "c": "O(E²)",
              "d": "O(V log V)"
            },
            "correct_answer": "b"
          },
          {
            "question": "Какая структура данных используется для хранения элементов с уникальными ключами?",
            "options": {
              "a": "Массив",
              "b": "Множество (Set)",
              "c": "Очередь",
              "d": "Стек"
            },
            "correct_answer": "b"
          },
          {
            "question": "Какой алгоритм используется для проверки наличия цикла в направленном графе?",
            "options": {
              "a": "Обход в ширину",
              "b": "Обход в глубину",
              "c": "Алгоритм Прима",
              "d": "Алгоритм Дейкстры"
            },
            "correct_answer": "b"
          },
          {
            "question": "Какова временная сложность операции удаления минимального элемента из бинарной кучи?",
            "options": {
              "a": "O(1)",
              "b": "O(log n)",
              "c": "O(n)",
              "d": "O(n log n)"
            },
            "correct_answer": "b"
          },
          {
            "question": "Как называется структура данных, которая хранит элементы в порядке возрастания их приоритета?",
            "options": {
              "a": "Стек",
              "b": "Очередь с приоритетом",
              "c": "Хэш-таблица",
              "d": "Связный список"
            },
            "correct_answer": "b"
          },
          {
            "question": "Какой алгоритм решает задачу о максимальном потоке в графе?",
            "options": {
              "a": "Алгоритм Форда-Фалкерсона",
              "b": "Алгоритм Прима",
              "c": "Алгоритм Крускала",
              "d": "Алгоритм Беллмана-Форда"
            },
            "correct_answer": "a"
          },
          {
            "question": "Какой тип данных используется для представления чисел с плавающей точкой двойной точности?",
            "options": {
              "A": "int",
              "B": "float",
              "C": "double",
              "D": "char",
              "E": "bool"
            },
            "correct_answer": "C"
          },
          {
            "question": "Какой оператор открывает файл «data.txt» для записи в C++?",
            "options": {
              "A": "ifstream dataPtr(\"data.txt\", ios::in)",
              "B": "ofstream dataPtr(\"data.txt\", ios::out)",
              "C": "fstream dataPtr(\"data.txt\", ios::app)",
              "D": "ifstream dataPtr(\"data.txt\", ios::out)",
              "E": "ofstream dataPtr(\"data.txt\", ios::in)"
            },
            "correct_answer": "B"
          },
          {
            "question": "Какой алгоритм сортировки показан в следующем фрагменте кода?\nvoid Sort(vector<int>& arr) {\n    for (size_t i = 1; i < arr.size(); ++i) {\n        int key = arr[i];\n        int j = i - 1;\n        while (j >= 0 && arr[j] > key) {\n            arr[j + 1] = arr[j];\n            j--;\n        }\n        arr[j + 1] = key;\n    }\n}",
            "options": {
              "A": "Пузырьковая сортировка",
              "B": "Сортировка выбором",
              "C": "Сортировка вставками",
              "D": "Быстрая сортировка",
              "E": "Сортировка слиянием"
            },
            "correct_answer": "C"
          },
          {
            "question": "Какой символ обозначает перенос строки в C/C++?",
            "options": {
              "A": "\\t",
              "B": "\\n",
              "C": "\\r",
              "D": "\\",
              "E": "\\a"
            },
            "correct_answer": "B"
          },
          {
            "question": "Какая функция в C возвращает длину строки, не включая нулевой терминатор?",
            "options": {
              "A": "strlen(const char *s)",
              "B": "strspn(const char *s1, const char *s2)",
              "C": "strcspn(const char *s1, const char *s2)",
              "D": "strcpy(char *dest, const char *src)",
              "E": "strcat(char *dest, const char *src)"
            },
            "correct_answer": "A"
          },
          {
            "question": "Какой метод хеширования минимизирует коллизии за счет использования двух хэш-функций?",
            "options": {
              "A": "Линейное зондирование",
              "B": "Квадратичное зондирование",
              "C": "Двойное хеширование",
              "D": "Хэширование с цепочками",
              "E": "B+-дерево"
            },
            "correct_answer": "C"
          },
          {
            "question": "Какой алгоритм поиска в графе имеет временную сложность O(|V| + |E|) и используется для топологической сортировки?",
            "options": {
              "A": "Алгоритм Дейкстры",
              "B": "Поиск в ширину (BFS)",
              "C": "Поиск в глубину (DFS)",
              "D": "Алгоритм Флойда-Уоршалла",
              "E": "Алгоритм Беллмана-Форда"
            },
            "correct_answer": "C"
          },
          {
            "question": "Каков результат следующего логического выражения в C++?\n#include <iostream>\nusing namespace std;\nint main() {\n    int x = 3, y = 8;\n    cout << (x <= 4 && y > 7);\n}",
            "options": {
              "A": "0",
              "B": "1",
              "C": "3",
              "D": "8",
              "E": "11"
            },
            "correct_answer": "B"
          },
          {
            "question": "Какой тип данных используется для хранения одного символа в C++?",
            "options": {
              "A": "int",
              "B": "float",
              "C": "char",
              "D": "double",
              "E": "bool"
            },
            "correct_answer": "C"
          },
          {
            "question": "Какая структура данных лучше всего подходит для хранения элементов в порядке FIFO?",
            "options": {
              "A": "Стек",
              "B": "Очередь",
              "C": "Дек",
              "D": "Хэш-таблица",
              "E": "Двоичное дерево"
            },
            "correct_answer": "B"
          },
          {
            "question": "Какой оператор закрывает файл в C?",
            "options": {
              "A": "fclose(FILE *ptr)",
              "B": "close(FILE *ptr)",
              "C": "endfile(FILE *ptr)",
              "D": "fstop(FILE *ptr)",
              "E": "fexit(FILE *ptr)"
            },
            "correct_answer": "A"
          },
          {
            "question": "Какой алгоритм сортировки показан в следующем фрагменте кода?\nvoid Sort(vector<int>& arr) {\n    for (size_t i = 0; i < arr.size(); ++i) {\n        int min_idx = i;\n        for (size_t j = i + 1; j < arr.size(); ++j) {\n            if (arr[j] < arr[min_idx]) {\n                min_idx = j;\n            }\n        }\n        swap(arr[i], arr[min_idx]);\n    }\n}",
            "options": {
              "A": "Сортировка вставками",
              "B": "Сортировка выбором",
              "C": "Пузырьковая сортировка",
              "D": "Быстрая сортировка",
              "E": "Сортировка слиянием"
            },
            "correct_answer": "B"
          },
          {
            "question": "Какой символ обозначает звуковой сигнал в C/C++?",
            "options": {
              "A": "\\n",
              "B": "\\t",
              "C": "\\a",
              "D": "\\r",
              "E": "\\"
            },
            "correct_answer": "C"
          },
          {
            "question": "Какая функция в C копирует строку из источника в назначение, включая нулевой терминатор?",
            "options": {
              "A": "strcat(char *dest, const char *src)",
              "B": "strcpy(char *dest, const char *src)",
              "C": "strncat(char *dest, const char *src, size_t n)",
              "D": "strspn(const char *s1, const char *s2)",
              "E": "strlen(const char *s)"
            },
            "correct_answer": "B"
          },
          {
            "question": "Какой метод хеширования использует дополнительные списки для обработки коллизий?",
            "options": {
              "A": "Линейное зондирование",
              "B": "Квадратичное зондирование",
              "C": "Хэширование с цепочками",
              "D": "Двойное хеширование",
              "E": "B-дерево"
            },
            "correct_answer": "C"
          },
          {
            "question": "Какой алгоритм имеет временную сложность O(|V|²) для поиска кратчайшего пути в плотном графе?",
            "options": {
              "A": "Алгоритм Беллмана-Форда",
              "B": "Алгоритм Дейкстры с массивом",
              "C": "Поиск в глубину (DFS)",
              "D": "Алгоритм Флойда-Уоршалла",
              "E": "Поиск в ширину (BFS)"
            },
            "correct_answer": "B"
          },
          {
            "question": "Каков результат следующего кода в C++?\n#include <iostream>\nusing namespace std;\nint main() {\n    int a = 5, b = 10;\n    cout << (a != b);\n}",
            "options": {
              "A": "0",
              "B": "1",
              "C": "5",
              "D": "10",
              "E": "15"
            },
            "correct_answer": "B"
          },
          {
            "question": "Какой тип данных используется для хранения логических значений в C++?",
            "options": {
              "A": "int",
              "B": "char",
              "C": "bool",
              "D": "float",
              "E": "double"
            },
            "correct_answer": "C"
          },
          {
            "question": "Какая структура данных используется для представления разреженного графа?",
            "options": {
              "A": "Матрица смежности",
              "B": "Список смежности",
              "C": "Массив",
              "D": "Хэш-таблица",
              "E": "Куча"
            },
            "correct_answer": "B"
          },
          {
            "question": "Какой оператор открывает файл «input.txt» для чтения в C?",
            "options": {
              "A": "FILE *ptr = fopen(\"input.txt\", \"w\")",
              "B": "FILE *ptr = fopen(\"input.txt\", \"r\")",
              "C": "FILE *ptr = fopen(\"input.txt\", \"a\")",
              "D": "FILE *ptr = fopen(\"input.txt\", \"rw\")",
              "E": "FILE *ptr = open(\"input.txt\", \"r\")"
            },
            "correct_answer": "B"
          },
          {
            "question": "Какой алгоритм сортировки имеет временную сложность O(n) в лучшем случае для почти отсортированного массива?",
            "options": {
              "A": "Быстрая сортировка",
              "B": "Сортировка вставками",
              "C": "Сортировка выбором",
              "D": "Пузырьковая сортировка",
              "E": "Сортировка кучей"
            },
            "correct_answer": "B"
          },
          {
            "question": "Какой символ обозначает возврат каретки в C/C++?",
            "options": {
              "A": "\\n",
              "B": "\\t",
              "C": "\\r",
              "D": "\\a",
              "E": "\\"
            },
            "correct_answer": "C"
          },
          {
            "question": "Какая функция в C сравнивает две строки лексикографически?",
            "options": {
              "A": "strcmp(const char *s1, const char *s2)",
              "B": "strcpy(char *dest, const char *src)",
              "C": "strcat(char *dest, const char *src)",
              "D": "strspn(const char *s1, const char *s2)",
              "E": "strlen(const char *s)"
            },
            "correct_answer": "A"
          },
          {
            "question": "Какой метод хеширования увеличивает шаг при коллизии по квадратичному закону?",
            "options": {
              "A": "Линейное зондирование",
              "B": "Квадратичное зондирование",
              "C": "Двойное хеширование",
              "D": "Хэширование с цепочками",
              "E": "B+-дерево"
            },
            "correct_answer": "B"
          },
          {
            "question": "Какой алгоритм имеет временную сложность O(n) для проверки, является ли граф связным?",
            "options": {
              "A": "Алгоритм Дейкстры",
              "B": "Поиск в глубину (DFS)",
              "C": "Алгоритм Прима",
              "D": "Алгоритм Крускала",
              "E": "Алгоритм Флойда-Уоршалла"
            },
            "correct_answer": "B"
          },
          {
            "question": "Каков результат следующего кода в C++?\n#include <iostream>\nusing namespace std;\nint main() {\n    int x = 6, y = 3;\n    cout << (x % y == 0);\n}",
            "options": {
              "A": "0",
              "B": "1",
              "C": "3",
              "D": "6",
              "E": "9"
            },
            "correct_answer": "B"
          },
          {
            "question": "Какой тип данных используется для хранения больших целых чисел в C++?",
            "options": {
              "A": "int",
              "B": "long long",
              "C": "float",
              "D": "char",
              "E": "bool"
            },
            "correct_answer": "B"
          },
          {
            "question": "Какая структура данных используется для реализации алгоритма FIFO?",
            "options": {
              "A": "Стек",
              "B": "Очередь",
              "C": "Дек",
              "D": "Хэш-таблица",
              "E": "Куча"
            },
            "correct_answer": "B"
          },
          {
            "question": "Какой оператор записывает данные в файл в C?",
            "options": {
              "A": "fprintf(FILE *ptr, const char *format, ...)",
              "B": "fscanf(FILE *ptr, const char *format, ...)",
              "C": "fgets(char *str, int n, FILE *ptr)",
              "D": "fputs(const char *str, FILE *ptr)",
              "E": "fread(void *ptr, size_t size, size_t nmemb, FILE *stream)"
            },
            "correct_answer": "A"
          },
          {
            "question": "Какой алгоритм сортировки показан в следующем фрагменте кода?\nvoid Sort(vector<int>& arr) {\n    int n = arr.size();\n    for (int i = n / 2 - 1; i >= 0; i--) {\n        heapify(arr, n, i);\n    }\n    for (int i = n - 1; i > 0; i--) {\n        swap(arr[0], arr[i]);\n        heapify(arr, i, 0);\n    }\n}",
            "options": {
              "A": "Пузырьковая сортировка",
              "B": "Сортировка выбором",
              "C": "Сортировка кучей",
              "D": "Быстрая сортировка",
              "E": "Сортировка вставками"
            },
            "correct_answer": "C"
          },
          {
            "question": "Какой символ обозначает обратную косую черту в C/C++?",
            "options": {
              "A": "\\n",
              "B": "\\t",
              "C": "\\r",
              "D": "\\",
              "E": "\\a"
            },
            "correct_answer": "D"
          },
          {
            "question": "Какая функция в C возвращает указатель на первое вхождение символа в строке?",
            "options": {
              "A": "strchr(const char *s, int c)",
              "B": "strcpy(char *dest, const char *src)",
              "C": "strcat(char *dest, const char *src)",
              "D": "strspn(const char *s1, const char *s2)",
              "E": "strlen(const char *s)"
            },
            "correct_answer": "A"
          },
          {
            "question": "Какой метод хеширования использует линейный шаг для разрешения коллизий?",
            "options": {
              "A": "Линейное зондирование",
              "B": "Квадратичное зондирование",
              "C": "Двойное хеширование",
              "D": "Хэширование с цепочками",
              "E": "B-дерево"
            },
            "correct_answer": "A"
          },
          {
            "question": "Какой алгоритм имеет временную сложность O(|E| log |V|) для нахождения минимального остовного дерева в разреженном графе?",
            "options": {
              "A": "Алгоритм Прима с кучей",
              "B": "Алгоритм Крускала",
              "C": "Алгоритм Дейкстры",
              "D": "Алгоритм Беллмана-Форда",
              "E": "Поиск в ширину (BFS)"
            },
            "correct_answer": "A"
          },
          {
            "question": "Каков результат следующего кода в C++?\n#include <iostream>\nusing namespace std;\nint main() {\n    int a = 10, b = 5;\n    cout << (a / b > 1);\n}",
            "options": {
              "A": "0",
              "B": "1",
              "C": "2",
              "D": "5",
              "E": "10"
            },
            "correct_answer": "B"
          },
          {
            "question": "Какой тип данных используется для хранения массива символов, завершающегося нулевым терминатором, в C?",
            "options": {
              "A": "int",
              "B": "char[]",
              "C": "float",
              "D": "bool",
              "E": "double"
            },
            "correct_answer": "B"
          },
          {
            "question": "Какая структура данных используется для хранения элементов с динамическим размером и быстрым доступом по индексу?",
            "options": {
              "A": "Связный список",
              "B": "Массив",
              "C": "Хэш-таблица",
              "D": "Двоичное дерево",
              "E": "Куча"
            },
            "correct_answer": "B"
          },
          {
            "question": "Какой оператор читает строку из файла в C?",
            "options": {
              "A": "fscanf(FILE *ptr, const char *format, ...)",
              "B": "fgets(char *str, int n, FILE *ptr)",
              "C": "fwrite(const void *ptr, size_t size, size_t nmemb, FILE *stream)",
              "D": "fputs(const char *str, FILE *ptr)",
              "E": "fprintf(FILE *ptr, const char *format, ...)"
            },
            "correct_answer": "B"
          },
          {
            "question": "Какой алгоритм используется для нахождения цикла в графе?",
            "options": {
              "A": "Алгоритм Дейкстры",
              "B": "Алгоритм Крускала",
              "C": "Поиск в глубину с обнаружением цикла",
              "D": "Алгоритм Прима",
              "E": "Алгоритм Флойда-Уоршалла"
            },
            "correct_answer": "C"
          },
          {
            "question": "Каков результат следующего кода в C++?\n#include <iostream>\nusing namespace std;\nint main() {\n    int x = 2, y = 3;\n    cout << (x * y < 10 && x + y > 4);\n}",
            "options": {
              "A": "0",
              "B": "1",
              "C": "5",
              "D": "6",
              "E": "10"
            },
            "correct_answer": "B"
          },
          {
            "question": "Какой тип данных в SQL используется для хранения целых чисел?",
            "options": {
              "A": "VARCHAR",
              "B": "FLOAT",
              "C": "INT",
              "D": "TEXT",
              "E": "BOOLEAN"
            },
            "correct_answer": "C"
          },
          {
            "question": "Какой оператор SQL создает новую таблицу?",
            "options": {
              "A": "INSERT INTO",
              "B": "CREATE TABLE",
              "C": "ALTER TABLE",
              "D": "DROP TABLE",
              "E": "UPDATE"
            },
            "correct_answer": "B"
          },
          {
            "question": "Какой SQL-запрос выберет все записи из таблицы `employees`?",
            "options": {
              "A": "SELECT * FROM employees",
              "B": "SELECT ALL FROM employees",
              "C": "GET * FROM employees",
              "D": "FETCH * FROM employees",
              "E": "READ * FROM employees"
            },
            "correct_answer": "A"
          },
          {
            "question": "Какой нормальной форме соответствует таблица, если все неключевые атрибуты зависят только от первичного ключа?",
            "options": {
              "A": "Первая нормальная форма (1NF)",
              "B": "Вторая нормальная форма (2NF)",
              "C": "Третья нормальная форма (3NF)",
              "D": "Форма Бойса-Кодда (BCNF)",
              "E": "Четвертая нормальная форма (4NF)"
            },
            "correct_answer": "B"
          },
          {
            "question": "Какая команда SQL добавляет новую запись в таблицу `students`?",
            "options": {
              "A": "ADD INTO students",
              "B": "INSERT INTO students",
              "C": "APPEND INTO students",
              "D": "CREATE students",
              "E": "UPDATE students"
            },
            "correct_answer": "B"
          },
          {
            "question": "Какой оператор SQL используется для объединения строк из двух таблиц на основе условия?",
            "options": {
              "A": "UNION",
              "B": "JOIN",
              "C": "MERGE",
              "D": "GROUP BY",
              "E": "ORDER BY"
            },
            "correct_answer": "B"
          },
          {
            "question": "Какой SQL-запрос выберет уникальные значения столбца `city` из таблицы `customers`?",
            "options": {
              "A": "SELECT DISTINCT city FROM customers",
              "B": "SELECT UNIQUE city FROM customers",
              "C": "SELECT city FROM customers GROUP BY city",
              "D": "SELECT city FROM customers ORDER BY city",
              "E": "SELECT city FROM customers WHERE UNIQUE"
            },
            "correct_answer": "A"
          },
          {
            "question": "Как называется свойство транзакции, обеспечивающее выполнение всех операций или их отмену?",
            "options": {
              "A": "Консистентность",
              "B": "Изолированность",
              "C": "Атомарность",
              "D": "Долговечность",
              "E": "Независимость"
            },
            "correct_answer": "C"
          },
          {
            "question": "Какой SQL-запрос удаляет таблицу `orders`?",
            "options": {
              "A": "DELETE TABLE orders",
              "B": "DROP TABLE orders",
              "C": "REMOVE TABLE orders",
              "D": "CLEAR TABLE orders",
              "E": "ERASE TABLE orders"
            },
            "correct_answer": "B"
          },
          {
            "question": "Какой оператор SQL используется для фильтрации строк по условию?",
            "options": {
              "A": "WHERE",
              "B": "HAVING",
              "C": "GROUP BY",
              "D": "ORDER BY",
              "E": "SELECT"
            },
            "correct_answer": "A"
          },
          {
            "question": "Какой SQL-запрос найдет среднюю зарплату (`salary`) сотрудников в таблице `employees`?",
            "options": {
              "A": "SELECT AVG(salary) FROM employees",
              "B": "SELECT SUM(salary) FROM employees",
              "C": "SELECT MEAN(salary) FROM employees",
              "D": "SELECT MEDIAN(salary) FROM employees",
              "E": "SELECT TOTAL(salary) FROM employees"
            },
            "correct_answer": "A"
          },
          {
            "question": "Какой тип данных в SQL используется для хранения строк переменной длины?",
            "options": {
              "A": "CHAR",
              "B": "VARCHAR",
              "C": "TEXT",
              "D": "INT",
              "E": "BLOB"
            },
            "correct_answer": "B"
          },
          {
            "question": "Какой SQL-запрос объединяет результаты двух запросов, исключая дубликаты?",
            "options": {
              "A": "JOIN",
              "B": "UNION",
              "C": "INTERSECT",
              "D": "MINUS",
              "E": "MERGE"
            },
            "correct_answer": "B"
          },
          {
            "question": "Как называется процесс разбиения таблицы на несколько для устранения избыточности?",
            "options": {
              "A": "Денормализация",
              "B": "Нормализация",
              "C": "Индексация",
              "D": "Фрагментация",
              "E": "Репликация"
            },
            "correct_answer": "B"
          },
          {
            "question": "Какой SQL-запрос изменит значение столбца `price` в таблице `products` на 100 для записей, где `id = 5`?",
            "options": {
              "A": "UPDATE products SET price = 100 WHERE id = 5",
              "B": "ALTER products SET price = 100 WHERE id = 5",
              "C": "MODIFY products SET price = 100 WHERE id = 5",
              "D": "SET products price = 100 WHERE id = 5",
              "E": "UPDATE products WHERE id = 5 SET price = 100"
            },
            "correct_answer": "A"
          },
          {
            "question": "Какой оператор SQL группирует строки по значению столбца?",
            "options": {
              "A": "WHERE",
              "B": "GROUP BY",
              "C": "ORDER BY",
              "D": "HAVING",
              "E": "SELECT"
            },
            "correct_answer": "B"
          },
          {
            "question": "Какой SQL-запрос выберет записи из таблицы `orders` с датой заказа после 2023-01-01?",
            "options": {
              "A": "SELECT * FROM orders WHERE order_date > '2023-01-01'",
              "B": "SELECT * FROM orders WHERE order_date < '2023-01-01'",
              "C": "SELECT * FROM orders WHERE order_date = '2023-01-01'",
              "D": "SELECT * FROM orders HAVING order_date > '2023-01-01'",
              "E": "SELECT * FROM orders ORDER BY order_date > '2023-01-01'"
            },
            "correct_answer": "A"
          },
          {
            "question": "Какой тип данных в SQL используется для хранения логических значений?",
            "options": {
              "A": "INT",
              "B": "VARCHAR",
              "C": "BOOLEAN",
              "D": "FLOAT",
              "E": "DATE"
            },
            "correct_answer": "C"
          },
          {
            "question": "Какой SQL-запрос объединяет таблицы `employees` и `departments` по столбцу `dept_id`?",
            "options": {
              "A": "SELECT * FROM employees JOIN departments ON employees.dept_id = departments.dept_id",
              "B": "SELECT * FROM employees UNION departments WHERE dept_id = dept_id",
              "C": "SELECT * FROM employees MERGE departments ON dept_id",
              "D": "SELECT * FROM employees GROUP BY dept_id WITH departments",
              "E": "SELECT * FROM employees WHERE dept_id = departments.dept_id"
            },
            "correct_answer": "A"
          },
          {
            "question": "Как называется свойство транзакции, гарантирующее сохранение данных после завершения?",
            "options": {
              "A": "Атомарность",
              "B": "Консистентность",
              "C": "Изолированность",
              "D": "Долговечность",
              "E": "Независимость"
            },
            "correct_answer": "D"
          },
          {
            "question": "Какой SQL-запрос удаляет все записи из таблицы `products`?",
            "options": {
              "A": "DROP TABLE products",
              "B": "DELETE FROM products",
              "C": "CLEAR FROM products",
              "D": "REMOVE FROM products",
              "E": "ERASE FROM products"
            },
            "correct_answer": "B"
          },
          {
            "question": "Какой оператор SQL используется для сортировки результатов запроса?",
            "options": {
              "A": "GROUP BY",
              "B": "ORDER BY",
              "C": "WHERE",
              "D": "HAVING",
              "E": "SELECT"
            },
            "correct_answer": "B"
          },
          {
            "question": "Какой SQL-запрос найдет количество записей в таблице `students`?",
            "options": {
              "A": "SELECT COUNT(*) FROM students",
              "B": "SELECT SUM(*) FROM students",
              "C": "SELECT TOTAL(*) FROM students",
              "D": "SELECT NUM(*) FROM students",
              "E": "SELECT LENGTH(*) FROM students"
            },
            "correct_answer": "A"
          },
          {
            "question": "Как называется модель данных, основанная на таблицах, строках и столбцах?",
            "options": {
              "A": "Иерархическая",
              "B": "Сетевая",
              "C": "Реляционная",
              "D": "Объектно-ориентированная",
              "E": "Документная"
            },
            "correct_answer": "C"
          },
          {
            "question": "Какой SQL-запрос добавляет новый столбец `email` в таблицу `users`?",
            "options": {
              "A": "ALTER TABLE users ADD email VARCHAR(100)",
              "B": "UPDATE TABLE users ADD email VARCHAR(100)",
              "C": "CREATE TABLE users ADD email VARCHAR(100)",
              "D": "MODIFY TABLE users ADD email VARCHAR(100)",
              "E": "INSERT TABLE users ADD email VARCHAR(100)"
            },
            "correct_answer": "A"
          },
          {
            "question": "Какой оператор SQL фильтрует группы, созданные с помощью GROUP BY?",
            "options": {
              "A": "WHERE",
              "B": "HAVING",
              "C": "ORDER BY",
              "D": "SELECT",
              "E": "JOIN"
            },
            "correct_answer": "B"
          },
          {
            "question": "Какой SQL-запрос найдет максимальную зарплату в таблице `employees`?",
            "options": {
              "A": "SELECT MAX(salary) FROM employees",
              "B": "SELECT TOP(salary) FROM employees",
              "C": "SELECT HIGHEST(salary) FROM employees",
              "D": "SELECT SUM(salary) FROM employees",
              "E": "SELECT FIRST(salary) FROM employees"
            },
            "correct_answer": "A"
          },
          {
            "question": "Какой тип данных в SQL используется для хранения дат и времени?",
            "options": {
              "A": "INT",
              "B": "VARCHAR",
              "C": "DATE",
              "D": "FLOAT",
              "E": "BOOLEAN"
            },
            "correct_answer": "C"
          },
          {
            "question": "Какой SQL-запрос выберет записи из таблицы `products`, где `price` между 50 и 100?",
            "options": {
              "A": "SELECT * FROM products WHERE price BETWEEN 50 AND 100",
              "B": "SELECT * FROM products WHERE price IN (50, 100)",
              "C": "SELECT * FROM products WHERE price > 50 AND price < 100",
              "D": "SELECT * FROM products WHERE price >= 50 OR price <= 100",
              "E": "SELECT * FROM products WHERE price = 50 TO 100"
            },
            "correct_answer": "A"
          },
          {
            "question": "Как называется процесс восстановления данных из резервной копии?",
            "options": {
              "A": "Нормализация",
              "B": "Репликация",
              "C": "Резервное копирование",
              "D": "Восстановление",
              "E": "Индексация"
            },
            "correct_answer": "D"
          },
          {
            "question": "Какой SQL-запрос объединяет таблицы `orders` и `customers` с сохранением всех записей из `customers`?",
            "options": {
              "A": "SELECT * FROM customers LEFT JOIN orders ON customers.id = orders.customer_id",
              "B": "SELECT * FROM customers RIGHT JOIN orders ON customers.id = orders.customer_id",
              "C": "SELECT * FROM customers INNER JOIN orders ON customers.id = orders.customer_id",
              "D": "SELECT * FROM customers FULL JOIN orders ON customers.id = orders.customer_id",
              "E": "SELECT * FROM customers UNION orders"
            },
            "correct_answer": "A"
          },
          {
            "question": "Какой оператор SQL используется для объединения строк из двух запросов с сохранением дубликатов?",
            "options": {
              "A": "UNION",
              "B": "UNION ALL",
              "C": "INTERSECT",
              "D": "MINUS",
              "E": "JOIN"
            },
            "correct_answer": "B"
          },
          {
            "question": "Какой SQL-запрос найдет количество сотрудников в каждом отделе из таблицы `employees`?",
            "options": {
              "A": "SELECT dept_id, COUNT(*) FROM employees GROUP BY dept_id",
              "B": "SELECT dept_id, SUM(*) FROM employees GROUP BY dept_id",
              "C": "SELECT dept_id, TOTAL(*) FROM employees GROUP BY dept_id",
              "D": "SELECT dept_id, COUNT(*) FROM employees ORDER BY dept_id",
              "E": "SELECT dept_id, COUNT(*) FROM employees WHERE dept_id"
            },
            "correct_answer": "A"
          },
          {
            "question": "Как называется структура, ускоряющая поиск в таблице за счет упорядоченных данных?",
            "options": {
              "A": "Триггер",
              "B": "Индекс",
              "C": "Представление",
              "D": "Процедура",
              "E": "Ключ"
            },
            "correct_answer": "B"
          },
          {
            "question": "Какой SQL-запрос создает индекс на столбце `name` в таблице `users`?",
            "options": {
              "A": "CREATE INDEX idx_name ON users(name)",
              "B": "ALTER TABLE users ADD INDEX name",
              "C": "CREATE TABLE users INDEX name",
              "D": "INDEX idx_name ON users(name)",
              "E": "ADD INDEX idx_name ON users(name)"
            },
            "correct_answer": "A"
          },
          {
            "question": "Какой оператор SQL используется для вызова хранимой процедуры?",
            "options": {
              "A": "CALL",
              "B": "EXECUTE",
              "C": "RUN",
              "D": "START",
              "E": "TRIGGER"
            },
            "correct_answer": "A"
          },
          {
            "question": "Какой SQL-запрос выберет первые 10 записей из таблицы `orders`, отсортированных по `order_date`?",
            "options": {
              "A": "SELECT * FROM orders ORDER BY order_date LIMIT 10",
              "B": "SELECT * FROM orders ORDER BY order_date TOP 10",
              "C": "SELECT * FROM orders ORDER BY order_date FETCH 10",
              "D": "SELECT * FROM orders ORDER BY order_date WHERE ROWNUM <= 10",
              "E": "SELECT * FROM orders ORDER BY order_date TAKE 10"
            },
            "correct_answer": "A"
          },
          {
            "question": "Какой тип данных в SQL используется для хранения больших объемов текста?",
            "options": {
              "A": "VARCHAR",
              "B": "TEXT",
              "C": "CHAR",
              "D": "INT",
              "E": "BOOLEAN"
            },
            "correct_answer": "B"
          },
          {
            "question": "Какой SQL-запрос найдет сотрудников с зарплатой выше средней в таблице `employees`?",
            "options": {
              "A": "SELECT * FROM employees WHERE salary > (SELECT AVG(salary) FROM employees)",
              "B": "SELECT * FROM employees WHERE salary > AVG(salary)",
              "C": "SELECT * FROM employees GROUP BY salary HAVING salary > AVG(salary)",
              "D": "SELECT * FROM employees ORDER BY salary > AVG(salary)",
              "E": "SELECT * FROM employees WHERE salary > SUM(salary) / COUNT(*)"
            },
            "correct_answer": "A"
          },
          {
            "question": "Как называется механизм, автоматически выполняющий действия при изменении данных в таблице?",
            "options": {
              "A": "Индекс",
              "B": "Триггер",
              "C": "Представление",
              "D": "Процедура",
              "E": "Ключ"
            },
            "correct_answer": "B"
          },
          {
            "question": "Какой тип данных в SQL используется для хранения последовательности чисел, автоматически увеличивающейся для каждой новой записи?",
            "options": {
              "A": "SERIAL",
              "B": "INT",
              "C": "VARCHAR",
              "D": "BIGINT",
              "E": "SEQUENCE"
            },
            "correct_answer": "A"
          },
          {
            "question": "Какой SQL-запрос создает временную таблицу `temp_sales` для текущей сессии?",
            "options": {
              "A": "CREATE TEMPORARY TABLE temp_sales",
              "B": "CREATE TABLE temp_sales TEMP",
              "C": "CREATE SESSION TABLE temp_sales",
              "D": "CREATE VOLATILE TABLE temp_sales",
              "E": "CREATE TRANSIENT TABLE temp_sales"
            },
            "correct_answer": "A"
          },
          {
            "question": "Какой SQL-запрос присваивает ранг каждой записи в таблице `sales` по столбцу `amount` в порядке убывания?",
            "options": {
              "A": "SELECT amount, RANK() OVER (ORDER BY amount DESC) FROM sales",
              "B": "SELECT amount, ROW_NUMBER() OVER (ORDER BY amount ASC) FROM sales",
              "C": "SELECT amount, DENSE_RANK() OVER (ORDER BY amount DESC) FROM sales",
              "D": "SELECT amount, NTILE(4) OVER (ORDER BY amount DESC) FROM sales",
              "E": "SELECT amount, RANK() OVER (PARTITION BY amount) FROM sales"
            },
            "correct_answer": "A"
          },
          {
            "question": "Как называется процесс, при котором база данных возвращается к состоянию до выполнения транзакции?",
            "options": {
              "A": "Commit",
              "B": "Rollback",
              "C": "Checkpoint",
              "D": "Savepoint",
              "E": "Lock"
            },
            "correct_answer": "B"
          },
          {
            "question": "Какой SQL-запрос создает представление `active_users` для пользователей с `status = 'active'` в таблице `users`?",
            "options": {
              "A": "CREATE VIEW active_users AS SELECT * FROM users WHERE status = 'active'",
              "B": "CREATE TABLE active_users AS SELECT * FROM users WHERE status = 'active'",
              "C": "CREATE INDEX active_users ON users WHERE status = 'active'",
              "D": "CREATE PROCEDURE active_users AS SELECT * FROM users WHERE status = 'active'",
              "E": "CREATE TRIGGER active_users FOR users WHERE status = 'active'"
            },
            "correct_answer": "A"
          },
          {
            "question": "Какой тип объединения SQL возвращает все возможные комбинации строк из двух таблиц?",
            "options": {
              "A": "INNER JOIN",
              "B": "LEFT JOIN",
              "C": "RIGHT JOIN",
              "D": "FULL JOIN",
              "E": "CROSS JOIN"
            },
            "correct_answer": "E"
          },
          {
            "question": "Какой SQL-запрос найдет вторую по величине зарплату в таблице `employees`?",
            "options": {
              "A": "SELECT MAX(salary) FROM employees WHERE salary < (SELECT MAX(salary) FROM employees)",
              "B": "SELECT MIN(salary) FROM employees WHERE salary > (SELECT MIN(salary) FROM employees)",
              "C": "SELECT salary FROM employees ORDER BY salary DESC LIMIT 1 OFFSET 1",
              "D": "SELECT TOP 2 salary FROM employees ORDER BY salary DESC",
              "E": "SELECT salary FROM employees WHERE salary = SECOND MAX(salary)"
            },
            "correct_answer": "A"
          },
          {
            "question": "Какой уровень изоляции транзакции предотвращает проблему «грязного чтения»?",
            "options": {
              "A": "Read Uncommitted",
              "B": "Read Committed",
              "C": "Repeatable Read",
              "D": "Serializable",
              "E": "Snapshot"
            },
            "correct_answer": "B"
          },
          {
            "question": "Какой SQL-запрос добавляет уникальное ограничение на столбец `email` в таблице `users`?",
            "options": {
              "A": "ALTER TABLE users ADD CONSTRAINT unique_email UNIQUE (email)",
              "B": "ALTER TABLE users ADD UNIQUE KEY (email)",
              "C": "CREATE UNIQUE INDEX email ON users(email)",
              "D": "ALTER TABLE users SET UNIQUE (email)",
              "E": "MODIFY TABLE users ADD UNIQUE (email)"
            },
            "correct_answer": "A"
          },
          {
            "question": "Какой SQL-запрос использует обобщенное табличное выражение (CTE) для подсчета заказов по клиентам?",
            "options": {
              "A": "WITH order_counts AS (SELECT customer_id, COUNT(*) AS cnt FROM orders GROUP BY customer_id) SELECT * FROM order_counts",
              "B": "SELECT customer_id, COUNT(*) AS cnt FROM orders GROUP BY customer_id WITH order_counts",
              "C": "CREATE CTE order_counts AS SELECT customer_id, COUNT(*) FROM orders GROUP BY customer_id",
              "D": "WITH order_counts SELECT customer_id, COUNT(*) FROM orders GROUP BY customer_id",
              "E": "SELECT customer_id, COUNT(*) FROM orders GROUP BY customer_id AS order_counts"
            },
            "correct_answer": "A"
          },
          {
            "question": "Какой SQL-запрос найдет общее количество строк в таблице `products` с использованием оконной функции?",
            "options": {
              "A": "SELECT COUNT(*) OVER () FROM products",
              "B": "SELECT SUM(*) OVER () FROM products",
              "C": "SELECT TOTAL(*) OVER () FROM products",
              "D": "SELECT ROW_NUMBER() OVER () FROM products",
              "E": "SELECT RANK() OVER () FROM products"
            },
            "correct_answer": "A"
          },
          {
            "question": "Какой тип данных в SQL используется для хранения JSON-объектов?",
            "options": {
              "A": "TEXT",
              "B": "JSON",
              "C": "VARCHAR",
              "D": "BLOB",
              "E": "CLOB"
            },
            "correct_answer": "B"
          },
          {
            "question": "Какой SQL-запрос возвращает строки, присутствующие в одной таблице, но отсутствующие в другой?",
            "options": {
              "A": "UNION",
              "B": "INTERSECT",
              "C": "EXCEPT",
              "D": "JOIN",
              "E": "UNION ALL"
            },
            "correct_answer": "C"
          },
          {
            "question": "Как называется процесс оптимизации запросов для повышения производительности базы данных?",
            "options": {
              "A": "Нормализация",
              "B": "Индексация",
              "C": "Денормализация",
              "D": "Оптимизация запросов",
              "E": "Репликация"
            },
            "correct_answer": "D"
          },
          {
            "question": "Какой SQL-запрос обновляет столбец `stock` в таблице `products`, увеличивая его на 10 для товаров с `category = 'Books'`?",
            "options": {
              "A": "UPDATE products SET stock = stock + 10 WHERE category = 'Books'",
              "B": "ALTER products SET stock = stock + 10 WHERE category = 'Books'",
              "C": "MODIFY products SET stock = stock + 10 WHERE category = 'Books'",
              "D": "UPDATE products WHERE category = 'Books' SET stock = stock + 10",
              "E": "SET products stock = stock + 10 WHERE category = 'Books'"
            },
            "correct_answer": "A"
          },
          {
            "question": "Какой SQL-запрос найдет клиентов, у которых более 5 заказов в таблице `orders`?",
            "options": {
              "A": "SELECT customer_id, COUNT(*) FROM orders GROUP BY customer_id HAVING COUNT(*) > 5",
              "B": "SELECT customer_id, COUNT(*) FROM orders WHERE COUNT(*) > 5 GROUP BY customer_id",
              "C": "SELECT customer_id FROM orders GROUP BY customer_id WHERE COUNT(*) > 5",
              "D": "SELECT customer_id, SUM(*) FROM orders GROUP BY customer_id HAVING SUM(*) > 5",
              "E": "SELECT customer_id, COUNT(*) FROM orders ORDER BY COUNT(*) > 5"
            },
            "correct_answer": "A"
          },
          {
            "question": "Какой SQL-запрос проверяет, существует ли таблица `users` в базе данных?",
            "options": {
              "A": "SELECT * FROM information_schema.tables WHERE table_name = 'users'",
              "B": "CHECK TABLE users",
              "C": "EXISTS TABLE users",
              "D": "SHOW TABLE users",
              "E": "DESCRIBE TABLE users"
            },
            "correct_answer": "A"
          },
          {
            "question": "Какой тип данных в SQL используется для хранения временных меток?",
            "options": {
              "A": "DATE",
              "B": "TIME",
              "C": "TIMESTAMP",
              "D": "VARCHAR",
              "E": "INT"
            },
            "correct_answer": "C"
          },
          {
            "question": "Какой SQL-запрос объединяет таблицы `employees` и `projects` по `project_id`, включая все проекты?",
            "options": {
              "A": "SELECT * FROM projects LEFT JOIN employees ON projects.project_id = employees.project_id",
              "B": "SELECT * FROM projects RIGHT JOIN employees ON projects.project_id = employees.project_id",
              "C": "SELECT * FROM projects INNER JOIN employees ON projects.project_id = employees.project_id",
              "D": "SELECT * FROM projects FULL JOIN employees ON projects.project_id = employees.project_id",
              "E": "SELECT * FROM projects CROSS JOIN employees"
            },
            "correct_answer": "A"
          },
          {
            "question": "Какой SQL-запрос удаляет индекс `idx_name` из таблицы `users`?",
            "options": {
              "A": "DROP INDEX idx_name ON users",
              "B": "ALTER TABLE users DROP INDEX idx_name",
              "C": "DELETE INDEX idx_name FROM users",
              "D": "REMOVE INDEX idx_name ON users",
              "E": "ERASE INDEX idx_name ON users"
            },
            "correct_answer": "A"
          },
          {
            "question": "Какой SQL-запрос использует оконную функцию для нумерации строк в таблице `sales` по дате?",
            "options": {
              "A": "SELECT sale_date, ROW_NUMBER() OVER (ORDER BY sale_date) FROM sales",
              "B": "SELECT sale_date, RANK() OVER (ORDER BY sale_date) FROM sales",
              "C": "SELECT sale_date, DENSE_RANK() OVER (ORDER BY sale_date) FROM sales",
              "D": "SELECT sale_date, NTILE(4) OVER (ORDER BY sale_date) FROM sales",
              "E": "SELECT sale_date, COUNT(*) OVER (ORDER BY sale_date) FROM sales"
            },
            "correct_answer": "A"
          },
          {
            "question": "Какой SQL-запрос найдет товары из таблицы `products`, где `price` равен максимальной цене?",
            "options": {
              "A": "SELECT * FROM products WHERE price = (SELECT MAX(price) FROM products)",
              "B": "SELECT * FROM products WHERE price = TOP(price)",
              "C": "SELECT * FROM products ORDER BY price DESC LIMIT 1",
              "D": "SELECT * FROM products HAVING price = MAX(price)",
              "E": "SELECT * FROM products WHERE price = HIGHEST(price)"
            },
            "correct_answer": "A"
          },
          {
            "question": "Как называется процесс разделения базы данных на части для распределенного хранения?",
            "options": {
              "A": "Нормализация",
              "B": "Репликация",
              "C": "Фрагментация",
              "D": "Индексация",
              "E": "Денормализация"
            },
            "correct_answer": "C"
          },
          {
            "question": "Какой SQL-запрос создает триггер `log_update` для записи изменений в таблице `employees`?",
            "options": {
              "A": "CREATE TRIGGER log_update AFTER UPDATE ON employees FOR EACH ROW INSERT INTO log_table VALUES (OLD.id, NEW.salary)",
              "B": "CREATE PROCEDURE log_update AFTER UPDATE ON employees INSERT INTO log_table VALUES (id, salary)",
              "C": "CREATE VIEW log_update AS UPDATE employees INSERT INTO log_table VALUES (id, salary)",
              "D": "CREATE INDEX log_update ON employees AFTER UPDATE",
              "E": "CREATE FUNCTION log_update AFTER UPDATE ON employees RETURN log_table"
            },
            "correct_answer": "A"
          },
          {
            "question": "Какой SQL-запрос найдет сотрудников, у которых нет заказов в таблице `orders`?",
            "options": {
              "A": "SELECT * FROM employees LEFT JOIN orders ON employees.id = orders.employee_id WHERE orders.employee_id IS NULL",
              "B": "SELECT * FROM employees RIGHT JOIN orders ON employees.id = orders.employee_id WHERE orders.employee_id IS NULL",
              "C": "SELECT * FROM employees INNER JOIN orders ON employees.id = orders.employee_id WHERE orders.employee_id IS NULL",
              "D": "SELECT * FROM employees FULL JOIN orders ON employees.id = orders.employee_id WHERE orders.employee_id IS NULL",
              "E": "SELECT * FROM employees EXCEPT orders WHERE employee_id IS NULL"
            },
            "correct_answer": "A"
          },
          {
            "question": "Какой тип данных в SQL используется для хранения больших символьных объектов?",
            "options": {
              "A": "VARCHAR",
              "B": "TEXT",
              "C": "CLOB",
              "D": "BLOB",
              "E": "INT"
            },
            "correct_answer": "C"
          },
          {
            "question": "Какой SQL-запрос группирует продажи по месяцам в таблице `sales`?",
            "options": {
              "A": "SELECT EXTRACT(MONTH FROM sale_date), SUM(amount) FROM sales GROUP BY EXTRACT(MONTH FROM sale_date)",
              "B": "SELECT MONTH(sale_date), SUM(amount) FROM sales GROUP BY MONTH(sale_date)",
              "C": "SELECT sale_date, SUM(amount) FROM sales GROUP BY sale_date",
              "D": "SELECT EXTRACT(MONTH FROM sale_date), COUNT(amount) FROM sales GROUP BY EXTRACT(MONTH FROM sale_date)",
              "E": "SELECT sale_date, SUM(amount) FROM sales ORDER BY EXTRACT(MONTH FROM sale_date)"
            },
            "correct_answer": "A"
          },
          {
            "question": "Какой уровень изоляции транзакции предотвращает проблему «фантомного чтения»?",
            "options": {
              "A": "Read Uncommitted",
              "B": "Read Committed",
              "C": "Repeatable Read",
              "D": "Serializable",
              "E": "Snapshot"
            },
            "correct_answer": "D"
          },
          {
            "question": "Какой SQL-запрос создает хранимую функцию `calc_tax` для расчета налога?",
            "options": {
              "A": "CREATE FUNCTION calc_tax (amount DECIMAL) RETURNS DECIMAL AS $$ BEGIN RETURN amount * 0.1; END; $$",
              "B": "CREATE PROCEDURE calc_tax (amount DECIMAL) RETURN amount * 0.1",
              "C": "CREATE TRIGGER calc_tax ON amount RETURN amount * 0.1",
              "D": "CREATE VIEW calc_tax AS SELECT amount * 0.1 FROM table",
              "E": "CREATE INDEX calc_tax ON amount * 0.1"
            },
            "correct_answer": "A"
          },
          {
            "question": "Какой SQL-запрос выберет записи из таблицы `orders`, где `status` содержит подстроку 'pend'?",
            "options": {
              "A": "SELECT * FROM orders WHERE status LIKE '%pend%'",
              "B": "SELECT * FROM orders WHERE status = 'pend*'",
              "C": "SELECT * FROM orders WHERE status IN 'pend%'",
              "D": "SELECT * FROM orders WHERE status MATCH 'pend'",
              "E": "SELECT * FROM orders WHERE status CONTAINS 'pend'"
            },
            "correct_answer": "A"
          },
          {
            "question": "Как называется процесс добавления избыточных данных для повышения производительности?",
            "options": {
              "A": "Нормализация",
              "B": "Денормализация",
              "C": "Репликация",
              "D": "Фрагментация",
              "E": "Индексация"
            },
            "correct_answer": "B"
          },
          {
            "question": "Какой SQL-запрос найдет общее количество заказов по клиентам, отсортированное по убыванию?",
            "options": {
              "A": "SELECT customer_id, COUNT(*) FROM orders GROUP BY customer_id ORDER BY COUNT(*) DESC",
              "B": "SELECT customer_id, SUM(*) FROM orders GROUP BY customer_id ORDER BY SUM(*) DESC",
              "C": "SELECT customer_id, COUNT(*) FROM orders ORDER BY COUNT(*) DESC",
              "D": "SELECT customer_id, TOTAL(*) FROM orders GROUP BY customer_id ORDER BY TOTAL(*) DESC",
              "E": "SELECT customer_id, COUNT(*) FROM orders GROUP BY customer_id SORT BY COUNT(*)"
            },
            "correct_answer": "A"
          },
          {
            "question": "Какой тип данных в SQL используется для хранения географических координат?",
            "options": {
              "A": "GEOMETRY",
              "B": "VARCHAR",
              "C": "INT",
              "D": "TEXT",
              "E": "BOOLEAN"
            },
            "correct_answer": "A"
          },
          {
            "question": "Какой SQL-запрос найдет сотрудников с зарплатой, превышающей среднюю зарплату их руководителя?",
            "options": {
              "A": "SELECT * FROM employees e JOIN managers m ON e.manager_id = m.id WHERE e.salary > (SELECT AVG(salary) FROM employees WHERE id = mcybersecurity m.id)",
              "B": "SELECT * FROM employees e WHERE salary > (SELECT AVG(salary) FROM managers)",
              "C": "SELECT * FROM employees e GROUP BY manager_id HAVING salary > AVG(salary)",
              "D": "SELECT * FROM employees e JOIN managers m ON e.manager_id = m.id WHERE e.salary > m.salary",
              "E": "SELECT * FROM employees e ORDER BY salary > (SELECT AVG(salary) FROM managers)"
            },
            "correct_answer": "A"
          },
          {
            "question": "Как называется механизм, позволяющий сохранять промежуточное состояние транзакции?",
            "options": {
              "A": "Commit",
              "B": "Rollback",
              "C": "Savepoint",
              "D": "Lock",
              "E": "Checkpoint"
            },
            "correct_answer": "C"
          },
          {
            "question": "Какой SQL-запрос создает кластерный индекс на столбце `order_id` в таблице `orders`?",
            "options": {
              "A": "CREATE CLUSTERED INDEX idx_order_id ON orders(order_id)",
              "B": "CREATE INDEX idx_order_id ON orders(order_id) CLUSTERED",
              "C": "ALTER TABLE orders ADD CLUSTERED INDEX idx_order_id",
              "D": "CREATE INDEX idx_order_id ON orders(order_id) WITH CLUSTER",
              "E": "ALTER TABLE orders CLUSTER ON order_id"
            },
            "correct_answer": "B"
          },
          {
            "question": "Какой SQL-запрос найдет товары, проданные в количестве, превышающем среднее количество продаж по категории?",
            "options": {
              "A": "SELECT p.* FROM products p JOIN (SELECT category, AVG(quantity) AS avg_qty FROM sales GROUP BY category) s ON p.category = s.category WHERE p.quantity > s.avg_qty",
              "B": "SELECT * FROM products WHERE quantity > (SELECT AVG(quantity) FROM sales)",
              "C": "SELECT * FROM products GROUP BY category HAVING quantity > AVG(quantity)",
              "D": "SELECT * FROM products WHERE quantity > AVG(quantity) GROUP BY category",
              "E": "SELECT * FROM products ORDER BY quantity > (SELECT AVG(quantity) FROM sales)"
            },
            "correct_answer": "A"
          },
          {
            "question": "Как называется процесс управления доступом к данным в базе?",
            "options": {
              "A": "Аутентификация",
              "B": "Авторизация",
              "C": "Репликация",
              "D": "Нормализация",
              "E": "Индексация"
            },
            "correct_answer": "B"
          },
          {
            "question": "Какой SQL-запрос использует оконную функцию для вычисления кумулятивной суммы продаж по дате?",
            "options": {
              "A": "SELECT sale_date, SUM(amount) OVER (ORDER BY sale_date) FROM sales",
              "B": "SELECT sale_date, SUM(amount) FROM sales GROUP BY sale_date",
              "C": "SELECT sale_date, TOTAL(amount) OVER (ORDER BY sale_date) FROM sales",
              "D": "SELECT sale_date, COUNT(amount) OVER (ORDER BY sale_date) FROM sales",
              "E": "SELECT sale_date, SUM(amount) OVER (PARTITION BY sale_date) FROM sales"
            },
            "correct_answer": "A"
          }
] 